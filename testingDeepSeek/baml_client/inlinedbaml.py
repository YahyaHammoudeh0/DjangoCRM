###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off

file_map = {
    
    "../c:\\Users\\Mohamed\\Documents\\sitech internship\\Capstone Project\\testingDeepSeek\\baml_src\\clients.baml": "// Learn more about clients at https://docs.boundaryml.com/docs/snippets/clients/overview\r\n\r\nclient<llm> MyDeepseekV3 {\r\n  provider \"openai-generic\"\r\n  options {\r\n    base_url \"https://api.together.ai/v1\"\r\n    api_key env.TOGETHER_API_KEY\r\n    model \"deepseek-ai/DeepSeek-V3\"\r\n    temperature 0\r\n  }\r\n}\r\n",
    "../c:\\Users\\Mohamed\\Documents\\sitech internship\\Capstone Project\\testingDeepSeek\\baml_src\\generators.baml": "// This helps use auto generate libraries you can use in the language of\n// your choice. You can have multiple generators if you use multiple languages.\n// Just ensure that the output_dir is different for each generator.\ngenerator target {\n    // Valid values: \"python/pydantic\", \"typescript\", \"ruby/sorbet\", \"rest/openapi\"\n    output_type \"python/pydantic\"\n\n    // Where the generated code will be saved (relative to baml_src/)\n    output_dir \"../\"\n\n    // The version of the BAML package you have installed (e.g. same version as your baml-py or @boundaryml/baml).\n    // The BAML VSCode extension version should also match this version.\n    version \"0.75.0\"\n\n    // Valid values: \"sync\", \"async\"\n    // This controls what `b.FunctionName()` will be (sync or async).\n    default_client_mode sync\n}\n",
    "../c:\\Users\\Mohamed\\Documents\\sitech internship\\Capstone Project\\testingDeepSeek\\baml_src\\resume.baml": "// Defining a data model.\r\nclass LeadInfo{\r\n  companyName string\r\n  industry string\r\n  employeeCount int?\r\n  budgetEstimate float\r\n  country string\r\n  companyNeeds string\r\n  description string\r\n  expectedScore float?\r\n}\r\n\r\nclass LeadExamples{\r\n  amazingLeads LeadInfo[]\r\n  decentLeads LeadInfo[]\r\n  terribleLeads LeadInfo[]\r\n}\r\nclass Leads {\r\n  lead_score float\r\n}\r\n\r\n// Create a function to extract the resume from a string.\r\nfunction ScoreTheLead(lead_info: LeadInfo, lead_examples: LeadExamples) -> Leads {\r\n  // Specify a client as provider/model-name\r\n  // you can use custom LLM params with a custom client name from clients.baml like \"client CustomHaiku\"\r\n  client \"MyDeepseekV3\" // Set OPENAI_API_KEY to use this client.\r\n  prompt #\"\r\n    Use this content to generate a lead score for the lead info from 1 to 100 using floats.\r\n    \r\n    Company Name: {{ lead_info.companyName }}\r\n    Industry {{ lead_info.industry }}\r\n    Employee count {{ lead_info.employeeCount }}\r\n    Budget Estimate {{ lead_info.budgetEstimate }}\r\n    Country {{ lead_info.country }}\r\n    Company Need {{ lead_info.companyNeeds }}\r\n    Description {{ lead_info.description }}\r\n\r\n\r\n    Depend on {{lead_examples}} to generate the lead scores.\r\n    {{ ctx.output_format }}\r\n  \"#\r\n}\r\n\r\ntest TestScoreTheLeadWithLowBudget {\r\n  functions [ScoreTheLead]\r\n  args {\r\n    lead_info {\r\n      companyName \"Future Tech Solutions\"\r\n      industry \"Technology\"\r\n      employeeCount 200\r\n      budgetEstimate 2000000.0\r\n      country \"USA\"\r\n      companyNeeds \"Expansion of AI research and development\"\r\n      description \"A cutting-edge technology company specializing in artificial intelligence and machine learning solutions.\"\r\n    }\r\n    lead_examples {\r\n      amazingLeads [\r\n      {\r\n      companyName \"Tech Innovators\"\r\n      industry \"Technology\"\r\n      employeeCount 500\r\n      budgetEstimate 1000000.0\r\n      country \"USA\"\r\n      companyNeeds \"Investment in R&D\"\r\n      description \"A leading tech company focusing on innovative solutions.\"\r\n      expectedScore 95.0\r\n      },\r\n      {\r\n      companyName \"Green Energy Co.\"\r\n      industry \"Renewable Energy\"\r\n      employeeCount 300\r\n      budgetEstimate 500000.0\r\n      country \"Germany\"\r\n      companyNeeds \"Expansion of solar panel production\"\r\n      description \"A company dedicated to providing renewable energy solutions.\"\r\n      expectedScore 90.0\r\n      }\r\n      ]\r\n      decentLeads [\r\n      {\r\n      companyName \"Local Grocers\"\r\n      industry \"Retail\"\r\n      employeeCount 50\r\n      budgetEstimate 10000.0\r\n      country \"Canada\"\r\n      companyNeeds \"Supply chain optimization\"\r\n      description \"A chain of local grocery stores.\"\r\n      expectedScore 70.0\r\n      },\r\n      {\r\n      companyName \"EduTech\"\r\n      industry \"Education\"\r\n      employeeCount 100\r\n      budgetEstimate 20000.0\r\n      country \"UK\"\r\n      companyNeeds \"Development of online learning platforms\"\r\n      description \"An educational technology company.\"\r\n      expectedScore 75.0\r\n      }\r\n      ]\r\n      terribleLeads [\r\n      {\r\n      companyName \"Old School Industries\"\r\n      industry \"Manufacturing\"\r\n      employeeCount 20\r\n      budgetEstimate 5000.0\r\n      country \"India\"\r\n      companyNeeds \"Modernization of equipment\"\r\n      description \"A small manufacturing company with outdated equipment.\"\r\n      expectedScore 40.0\r\n      },\r\n      {\r\n      companyName \"Struggling Startups\"\r\n      industry \"Various\"\r\n      employeeCount 5\r\n      budgetEstimate 1000.0\r\n      country \"Brazil\"\r\n      companyNeeds \"Initial funding\"\r\n      description \"A group of startups struggling to get off the ground.\"\r\n      expectedScore 30.0\r\n      }\r\n      ]\r\n    }\r\n    }\r\n}\r\n",
}

def get_baml_files():
    return file_map